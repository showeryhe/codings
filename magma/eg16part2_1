/* initialzation of the parameters */

p:=2; n:=4; q:=2; k:=2;
/*	p:=2; n:=16; q:=4; k:=4;
 *	p:=3; n:=6; q:=3; k:=3;
 */

Z:=Integers();

/* the base fields */
Fq<t>:=FiniteField(p, n div (2*k));
// Fq2<t>:=ext<Fq|2>;
Fqt<t>:=PolynomialRing(Fq);
Fq2<t>:=ext<Fq|Fqt!t^2+t+1>;
Fq2X<X>:=PolynomialRing(Fq2);

/* initialization of the field */

/*	j:=0;
 *	while j eq 0 do
 *		a:=Random(Fq2); b:=Random(Fq2); c:=Random(Fq2); e:=Random(Fq2);
 *		h0<X>:=Fq2X!a*X^2+b*X+c;
 *		h1<X>:=Fq2X!X+e;
 *		T:=Factorization(h1*X^q-h0);	
 *		i:=0;
 *		while i lt #T and j eq 0 do
 *			i:=i+1;
 *			if Degree(T[i][1]) eq k then
 *				Ik<X>:=T[i][1];
 *				j:=j+1;
 *			end if;
 *		end while;
 *	end while;
 */
h1:=Fq2X!X+1;
h0<X>:=Fq2X!t^2*X;
Ik:=Fq2X!X^2+X+t^2;
gen:=X+1;
// gen:=rep{X+a: a in Fq2|IsPrimitive(ext<Fq2|Ik>!X+a)};



// ============= FUNCTIONS PRELIMINARY ==============
Fq2int:=function(x)
	z:=[Integers()!y: y in Eltseq(x)];
	return Seqint(z, p);
end function;

Fq2Xint:=function(f)
	return Seqint([Fq2int(x): x in Coefficients(Fq2X!(f mod Ik))], q^2);
end function;

PowCoef:=hom<Fq2 -> Fq2|Fq2.1^q>;
PowPoly:=function(P)
	CoefSeq:=Coefficients(P); D:=Degree(P); pow:=0;
	for tmp in [1..#CoefSeq] do
		pow+:=CoefSeq[tmp]^q*h1^(D-tmp+1)*h0^(tmp-1);
	end for;
	return pow;
end function;

Num:=function(P, m)
	return (PowCoef(m[1,1])*PowPoly(P)+PowCoef(m[1,2])*h1^Degree(P))*(m[2,1]*P+m[2,2])-(m[1,1]*P+m[1,2])*(PowCoef(m[2,1])*PowPoly(P)+PowCoef(m[2,2])*h1^Degree(P));
end function;

DegCrit:=function(f, d)
	F:=Factorization(f); i:=0; Crit:=true;
	while i lt #F and Crit do
		i+:=1;
		Crit := Crit and Degree(F[i][1]) le d;
	end while;
	return Crit;
end function;

Gaussian:=function(C, const)
	Ctmp:=C;
	ctmp:=const;
	i:=0;
	while i lt NumberOfColumns(C)-1 do
		i:=i+1;
		j:=i-1;
		while j lt NumberOfRows(C) do
			j:=j+1;
			Piv:=Ctmp[j, i];
			if Piv ne 0 then
				if IsUnit(Piv) then
					Ctmp[j]:=Piv^-1*Ctmp[j];
					ctmp[j]:=Piv^-1*ctmp[j];
					Piv:=1;
				end if;
				k:=j;
				j:=NumberOfRows(C);
			end if;
		end while;
		if Piv eq 0 then
			print i, "-th column, non-invertible";
			i:=NumberOfColumns(C)+1;
		else
			SwapRows(~Ctmp, i, k);
			SwapRows(~ctmp, i, k);
			for tmp in [i+1..NumberOfRows(C)] do
				c:=Ctmp[tmp, i];
				if c ne 0 then
					Ctmp[tmp]:=Piv*Ctmp[tmp] - c*Ctmp[i];
					ctmp[tmp,1]:=Piv*ctmp[tmp,1] - c*ctmp[i,1];
				end if;
			end for;
		end if;
	end while;
	return Ctmp, ctmp;
end function;
// ============= PART I ===================
LOG:=Matrix(Integers(), p^n, 2, []);

/* Initialization of consts in Fq2 */
d:=(p^n-1) div (q^2-1);
beta:=Fq2X!(gen^d mod Ik);
for i in [1..q^2-1] do
	LOG[Fq2Xint(beta^i), 1]:=i*d;
end for;

RepreCheck:=function(m0, M)
	for m in M do
		tmp:=m0*(m^-1);
		if tmp[1,1] ne 0 then
			tmp:=tmp*(Fq2!tmp[1, 1]^-1);
		else
			tmp:=tmp*(Fq2!tmp[1, 2]^-1);
		end if;
		if tmp[1, 1] in Fq and tmp[1, 2] in Fq and tmp[2, 1] in Fq and tmp[2, 2] in Fq then
			return M;
		end if;
	end for;
	return Append(M, m0);
end function;

/* the initialization of M */
g:=Fq2.1;
M:=[* *];
/* TYPE I */
for x in Fq2 do
	for y in Fq2 do
		if (not x in Fq) and (not y in Fq) and (x*y ne One(Fq2)) then
				M:=RepreCheck(Matrix(Fq2, 2, 2, [1, x, y, 1]), M);
		end if;
	end for;
end for;

for x in Fq do
	M:=RepreCheck(Matrix(Fq2, 2, 2, [0, 1, g, x*g]), M);
	M:=RepreCheck(Matrix(Fq2, 2, 2, [1, 0, x*g, g]), M);
	for y in Fq do			
			M:=RepreCheck(Matrix(Fq2, 2, 2, [0, 1, 1+x*g, y*g]), M);
			M:=RepreCheck(Matrix(Fq2, 2, 2, [1, 0, x*g, 1+y*g]), M);
			/* TYPE II */
			if x ne Zero(Fq) and y ne Zero(Fq) and x ne y then
				M:=RepreCheck(Matrix(Fq2, 2, 2, [1, x, g, y*g]), M);
			end if;
	end for;
end for;

MC:=Matrix(Fq2, #M, 1, []);
/* Initilization of H */
H:=Matrix(Integers(p^n-1), #M, q^2+1, []); // The last column is used to compute
i:=0;
while i lt #M do
	i:=i+1;
	m:=M[i];
	MC[i,1]:=One(Fq2);
	/* dealing with (x:1) in PG(1, q) */
	for x in Fq do
		if -m[2,1]*x+m[1,1] ne 0 then
			tmp:=-(m[2,2]*x-m[1,2])/(-m[2,1]*x+m[1,1]);
			H[i,Fq2int(tmp)+1]:=1;
			MC[i,1]:=MC[i,1]*(-m[2,1]*x+m[1,1]);
		else
			H[i, q^2+1]:=1;
			MC[i,1]:=MC[i,1]*(-(m[2,2]*x-m[1,2]));
		end if;
	end for;
	/* the (-1:0) in PG(1, q) */
	if m[2,1] ne 0 then
		tmp:=m[2,2]/m[2,1];
		H[i,Fq2int(tmp)+1]:=1;
		MC[i,1]:=MC[i,1]*(m[2,1]);
	else
		H[i, q^2+1]:=1;
		MC[i,1]:=MC[i,1]*(m[2,2]);
	end if;
end while;

/* construction of system of equation
 * in order to get the Log of linear polynomials
 */
 
C:=Matrix(Integers(p^n-1), #M+1, q^2, [<#M+1, Fq2Xint(gen-X)+1, 1>]);	// the matrix of coefficients
const:=Matrix(Integers(p^n-1), #M+1, 1, [<#M+1,1,1>]);
// column matrix of logarithm of constants Log(Fq2k, elt in Fq2)
v:=Matrix(Integers(p^n-1), #M, q^2, []);
for i in [1..#M] do//while i lt #M do
	N:=Num(X, M[i]);
	if DegCrit(N, 1) then
		// step-1 加分子部分的分解
		F:=Factorization(N);
		for j in [1..#F] do
			C[i, Fq2Xint(F[j][1]-X)+1]+:=F[j][2];
		end for;
		// step-2 处理h1
		C[i, Fq2Xint(h1-X)+1]+:=-1;
		// step-3 处理右边
		for tmp in [1..q^2] do	
			C[i, tmp]-:=H[i,tmp];
		end for;
		// step-4 右边的常数
		const[i,1]:=-(LOG[Fq2int(LeadingCoefficient(N)), 1]-LOG[Fq2int(MC[i, 1]), 1]-LOG[Fq2int(LeadingCoefficient(h1)),1]);
	end if;
end for;

linear:=Solution(Transpose(C), Transpose(const));
for x in Fq2 do
	LOG[Fq2Xint(X+x), 1]:=linear[1, Fq2Xint(x)+1];
end for;


//  ========== PART II ============
P<X>:=Fq2X!t*X+1;
D:=Degree(P); d:=Ceiling(D/2);
C2:=Matrix(Integers(p^n-1), #M, (q^2)^d + q^2 -1, []);//这个式子是不能推广的
r:=1; HP:=RemoveColumn(H, q^2+1);
for i in [1..#M] do
	N:=Num(P, M[i]);
	if N ne 0 and DegCrit(N, d) then
		F:=Factorization(N);
		for tmp in [1..#F] do
			C2[r, Fq2Xint(F[tmp, 1])]+:=F[tmp, 2];
		end for;
		C2[r, Fq2Xint(h1)]+:=-D;
		C2[r, Fq2Xint(LeadingCoefficient(N)/(LeadingCoefficient(h1)^D*MC[i,1]))]+:=1;
		r+:=1;
	else
		RemoveRow(~HP, r);
		RemoveRow(~C2, r);
	end if;
end for;






















